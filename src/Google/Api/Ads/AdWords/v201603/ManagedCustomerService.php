<?php
/*
 * File generated by ClassyFile <https://github.com/onema/classyfile>
 * (c) 2016, Juan Manuel Torres
 *
 * For the full copyright and license information,
 * please view the LICENSE file that was distributed
 * with this source code.
 */
namespace Google\Api\Ads\AdWords\v201603;
use Google\Api\Ads\AdWords\Lib\AdWordsSoapClient;

/**
   * ManagedCustomerService
   * @package Google_Api_Ads_AdWords_v201603
   * @subpackage v201603
   */
class ManagedCustomerService extends AdWordsSoapClient
{
    const SERVICE_NAME = 'ManagedCustomerService';
    const WSDL_NAMESPACE = 'https://adwords.google.com/api/adwords/mcm/v201603';
    const ENDPOINT = 'https://adwords.google.com/api/adwords/mcm/v201603/ManagedCustomerService';
    /**
     * The endpoint of the service
     * @var string
     */
    public static $endpoint = 'https://adwords.google.com/api/adwords/mcm/v201603/ManagedCustomerService';
    /**
     * Default class map for wsdl=>php
     * @access private
     * @var array
     */
    public static $classmap = [
        'AuthenticationError' => AuthenticationError::class,
        'AuthorizationError' => AuthorizationError::class,
        'ClientTermsError' => ClientTermsError::class,
        'DateError' => DateError::class,
        'DateRange' => DateRange::class,
        'DistinctError' => DistinctError::class,
        'IdError' => IdError::class,
        'InternalApiError' => InternalApiError::class,
        'NotEmptyError' => NotEmptyError::class,
        'NullError' => NullError::class,
        'OperationAccessDenied' => OperationAccessDenied::class,
        'OperatorError' => OperatorError::class,
        'OrderBy' => OrderBy::class,
        'Paging' => Paging::class,
        'Predicate' => Predicate::class,
        'QuotaCheckError' => QuotaCheckError::class,
        'RangeError' => RangeError::class,
        'RateExceededError' => RateExceededError::class,
        'ReadOnlyError' => ReadOnlyError::class,
        'RejectedError' => RejectedError::class,
        'RequestError' => RequestError::class,
        'RequiredError' => RequiredError::class,
        'SelectorError' => SelectorError::class,
        'SizeLimitError' => SizeLimitError::class,
        'SoapHeader' => SoapRequestHeader::class,
        'SoapResponseHeader' => SoapResponseHeader::class,
        'StringLengthError' => StringLengthError::class,
        'DatabaseError' => DatabaseError::class,
        'ApiError' => ApiError::class,
        'ApiException' => ApiException::class,
        'ApplicationException' => ApplicationException::class,
        'Selector' => Selector::class,
        'Operation' => Operation::class,
        'Page' => Page::class,
        'AuthenticationError.Reason' => AuthenticationErrorReason::class,
        'AuthorizationError.Reason' => AuthorizationErrorReason::class,
        'ClientTermsError.Reason' => ClientTermsErrorReason::class,
        'DatabaseError.Reason' => DatabaseErrorReason::class,
        'DateError.Reason' => DateErrorReason::class,
        'DistinctError.Reason' => DistinctErrorReason::class,
        'IdError.Reason' => IdErrorReason::class,
        'InternalApiError.Reason' => InternalApiErrorReason::class,
        'NotEmptyError.Reason' => NotEmptyErrorReason::class,
        'NullError.Reason' => NullErrorReason::class,
        'OperationAccessDenied.Reason' => OperationAccessDeniedReason::class,
        'Operator' => Operator::class,
        'OperatorError.Reason' => OperatorErrorReason::class,
        'Predicate.Operator' => PredicateOperator::class,
        'QuotaCheckError.Reason' => QuotaCheckErrorReason::class,
        'RangeError.Reason' => RangeErrorReason::class,
        'RateExceededError.Reason' => RateExceededErrorReason::class,
        'ReadOnlyError.Reason' => ReadOnlyErrorReason::class,
        'RejectedError.Reason' => RejectedErrorReason::class,
        'RequestError.Reason' => RequestErrorReason::class,
        'RequiredError.Reason' => RequiredErrorReason::class,
        'SelectorError.Reason' => SelectorErrorReason::class,
        'SizeLimitError.Reason' => SizeLimitErrorReason::class,
        'SortOrder' => SortOrder::class,
        'StringLengthError.Reason' => StringLengthErrorReason::class,
        'ManagedCustomerLabel' => ManagedCustomerLabel::class,
        'ManagedCustomerLabelOperation' => ManagedCustomerLabelOperation::class,
        'ManagedCustomerLabelReturnValue' => ManagedCustomerLabelReturnValue::class,
        'ManagedCustomerServiceError' => ManagedCustomerServiceError::class,
        'PendingInvitationSelector' => PendingInvitationSelector::class,
        'AccountLabel' => AccountLabel::class,
        'ManagedCustomerLink' => ManagedCustomerLink::class,
        'LinkOperation' => LinkOperation::class,
        'MoveOperation' => MoveOperation::class,
        'MutateLinkResults' => MutateLinkResults::class,
        'MutateManagerResults' => MutateManagerResults::class,
        'ManagedCustomer' => ManagedCustomer::class,
        'ManagedCustomerOperation' => ManagedCustomerOperation::class,
        'ManagedCustomerPage' => ManagedCustomerPage::class,
        'ManagedCustomerReturnValue' => ManagedCustomerReturnValue::class,
        'PendingInvitation' => PendingInvitation::class,
        'LinkStatus' => LinkStatus::class,
        'ManagedCustomerServiceError.Reason' => ManagedCustomerServiceErrorReason::class,
        'get' => ManagedCustomerServiceGet::class,
        'getResponse' => ManagedCustomerServiceGetResponse::class,
        'getPendingInvitations' => GetPendingInvitations::class,
        'getPendingInvitationsResponse' => GetPendingInvitationsResponse::class,
        'mutate' => ManagedCustomerServiceMutate::class,
        'mutateResponse' => ManagedCustomerServiceMutateResponse::class,
        'mutateLabel' => MutateLabel::class,
        'mutateLabelResponse' => MutateLabelResponse::class,
        'mutateLink' => MutateLink::class,
        'mutateLinkResponse' => MutateLinkResponse::class,
        'mutateManager' => MutateManager::class,
        'mutateManagerResponse' => MutateManagerResponse::class,
    ];

    /**
     * Constructor using wsdl location and options array
     * @param string $wsdl WSDL location for this service
     * @param array $options Options for the SoapClient
     */
    public function __construct($wsdl, $options, $user)
    {
        $options['classmap'] = self::$classmap;
        parent::__construct($wsdl, $options, $user, self::SERVICE_NAME, self::WSDL_NAMESPACE);
    }
    /**
     * <span class="constraint Required">This field is required and should not be {@code null}.</span>
     * 
     * 
     * 
     * Returns the list of customers that meet the selector criteria.
     * 
     * @param selector The selector specifying the {@link ManagedCustomer}s to return.
     * @return List of customers identified by the selector.
     * @throws ApiException When there is at least one error with the request.
     */
    public function get($serviceSelector)
    {
        $args = new ManagedCustomerServiceGet($serviceSelector);
        $result = $this->__soapCall('get', array($args));
        return $result->rval;
    }
    /**
     * <span class="constraint Required">This field is required and should not be {@code null}.</span>
     * 
     * 
     * 
     * Returns the pending invitations for the customer IDs in the selector.
     * @param selector the manager customer ids (inviters) or the client customer ids (invitees)
     * @throws ApiException when there is at least one error with the request
     */
    public function getPendingInvitations($selector)
    {
        $args = new GetPendingInvitations($selector);
        $result = $this->__soapCall('getPendingInvitations', array($args));
        return $result->rval;
    }
    /**
     * <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
     * <span class="constraint NotEmpty">This field must contain at least one element.</span>
     * <span class="constraint Required">This field is required and should not be {@code null}.</span>
     * <span class="constraint SupportedOperators">The following {@link Operator}s are supported: SET, ADD.</span>
     * 
     * 
     * 
     * Modifies or creates new {@link ManagedCustomer}s.
     * 
     * <p class="note"><b>Note:</b> See {@link ManagedCustomerOperation} for available operators.</p>
     * 
     * @param operations List of unique operations.
     * @return The list of updated managed customers, returned in the same order as the
     * <code>operations</code> array.
     */
    public function mutate($operations)
    {
        $args = new ManagedCustomerServiceMutate($operations);
        $result = $this->__soapCall('mutate', array($args));
        return $result->rval;
    }
    /**
     * <span class="constraint Required">This field is required and should not be {@code null}.</span>
     * <span class="constraint SupportedOperators">The following {@link Operator}s are supported: ADD, REMOVE.</span>
     * 
     * 
     * 
     * Adds {@linkplain AccountLabel}s to, and removes
     * {@linkplain AccountLabel}s from, {@linkplain ManagedCustomer}s.
     * 
     * <p>To add an {@linkplain AccountLabel} to a {@linkplain ManagedCustomer},
     * use {@link Operator#ADD}.
     * To remove an {@linkplain AccountLabel} from a {@linkplain ManagedCustomer},
     * use {@link Operator#REMOVE}.</p>
     * <p>The label must already exist (see {@link AccountLabelService#mutate} for
     * how to create them) and be owned by the authenticated user.</p>
     * <p>The {@linkplain ManagedCustomer} must already exist and be managed by
     * the customer making the request (either directly or indirectly).</p>
     * <p>An AccountLabel may be applied to at most 1000 customers.</p>
     * <p>This method does not support partial failures, and will fail if any
     * operation is invalid.</p>
     */
    public function mutateLabel($operations)
    {
        $args = new MutateLabel($operations);
        $result = $this->__soapCall('mutateLabel', array($args));
        return $result->rval;
    }
    /**
     * <span class="constraint Required">This field is required and should not be {@code null}.</span>
     * <span class="constraint SupportedOperators">The following {@link Operator}s are supported: SET, ADD.</span>
     * 
     * 
     * 
     * Modifies the ManagedCustomer forest. These actions are possible (categorized by
     * Operator + Link Status):
     * 
     * <ul>
     * <li>ADD + PENDING:   manager extends invitations</li>
     * <li>SET + CANCELLED: manager rescinds invitations</li>
     * <li>SET + INACTIVE:  manager/client terminates links</li>
     * <li>SET + ACTIVE:    client accepts invitations</li>
     * <li>SET + REFUSED:   client declines invitations</li>
     * </ul>
     * 
     * As of v201506 in addition to these, active links can also be marked hidden / unhidden.
     * <ul>
     * <li> An ACTIVE link can be marked hidden with SET + ACTIVE along with setting the
     * isHidden bit to true. </li>
     * <li> An ACTIVE link can be marked unhidden with SET + ACTIVE along with setting the
     * isHidden bit to false. </li>
     * </ul>
     * 
     * @param operations the list of operations
     * @return results for the given operations
     * @throws ApiException with a {@link ManagedCustomerServiceError}
     */
    public function mutateLink($operations)
    {
        $args = new MutateLink($operations);
        $result = $this->__soapCall('mutateLink', array($args));
        return $result->rval;
    }
    /**
     * <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
     * <span class="constraint NotEmpty">This field must contain at least one element.</span>
     * <span class="constraint Required">This field is required and should not be {@code null}.</span>
     * <span class="constraint SupportedOperators">The following {@link Operator}s are supported: SET.</span>
     * 
     * 
     * 
     * Moves client customers to new managers (moving links). Only the following action is possible:
     * 
     * <ul>
     * <li>SET + ACTIVE: manager moves client customers to new managers within the same manager
     * account hierarchy</li>
     * </ul>
     * 
     * @param operations List of unique operations.
     * @return results for the given operations
     * @throws ApiException with a {@link ManagedCustomerServiceError}
     */
    public function mutateManager($operations)
    {
        $args = new MutateManager($operations);
        $result = $this->__soapCall('mutateManager', array($args));
        return $result->rval;
    }
}
